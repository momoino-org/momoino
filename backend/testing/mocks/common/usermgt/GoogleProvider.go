// Code generated by mockery v2.46.2. DO NOT EDIT.

package mockusermgt

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	oauth2 "golang.org/x/oauth2"
)

// MockGoogleProvider is an autogenerated mock type for the GoogleProvider type
type MockGoogleProvider struct {
	mock.Mock
}

type MockGoogleProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGoogleProvider) EXPECT() *MockGoogleProvider_Expecter {
	return &MockGoogleProvider_Expecter{mock: &_m.Mock}
}

// AuthorizeHandler provides a mock function with given fields: w, r
func (_m *MockGoogleProvider) AuthorizeHandler(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// MockGoogleProvider_AuthorizeHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthorizeHandler'
type MockGoogleProvider_AuthorizeHandler_Call struct {
	*mock.Call
}

// AuthorizeHandler is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockGoogleProvider_Expecter) AuthorizeHandler(w interface{}, r interface{}) *MockGoogleProvider_AuthorizeHandler_Call {
	return &MockGoogleProvider_AuthorizeHandler_Call{Call: _e.mock.On("AuthorizeHandler", w, r)}
}

func (_c *MockGoogleProvider_AuthorizeHandler_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockGoogleProvider_AuthorizeHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockGoogleProvider_AuthorizeHandler_Call) Return() *MockGoogleProvider_AuthorizeHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGoogleProvider_AuthorizeHandler_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *MockGoogleProvider_AuthorizeHandler_Call {
	_c.Call.Return(run)
	return _c
}

// CallbackHandler provides a mock function with given fields: w, r
func (_m *MockGoogleProvider) CallbackHandler(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// MockGoogleProvider_CallbackHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallbackHandler'
type MockGoogleProvider_CallbackHandler_Call struct {
	*mock.Call
}

// CallbackHandler is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockGoogleProvider_Expecter) CallbackHandler(w interface{}, r interface{}) *MockGoogleProvider_CallbackHandler_Call {
	return &MockGoogleProvider_CallbackHandler_Call{Call: _e.mock.On("CallbackHandler", w, r)}
}

func (_c *MockGoogleProvider_CallbackHandler_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockGoogleProvider_CallbackHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockGoogleProvider_CallbackHandler_Call) Return() *MockGoogleProvider_CallbackHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGoogleProvider_CallbackHandler_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *MockGoogleProvider_CallbackHandler_Call {
	_c.Call.Return(run)
	return _c
}

// GetOAuth2Config provides a mock function with given fields: ctx
func (_m *MockGoogleProvider) GetOAuth2Config(ctx context.Context) (*oauth2.Config, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOAuth2Config")
	}

	var r0 *oauth2.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*oauth2.Config, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *oauth2.Config); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoogleProvider_GetOAuth2Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOAuth2Config'
type MockGoogleProvider_GetOAuth2Config_Call struct {
	*mock.Call
}

// GetOAuth2Config is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGoogleProvider_Expecter) GetOAuth2Config(ctx interface{}) *MockGoogleProvider_GetOAuth2Config_Call {
	return &MockGoogleProvider_GetOAuth2Config_Call{Call: _e.mock.On("GetOAuth2Config", ctx)}
}

func (_c *MockGoogleProvider_GetOAuth2Config_Call) Run(run func(ctx context.Context)) *MockGoogleProvider_GetOAuth2Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGoogleProvider_GetOAuth2Config_Call) Return(_a0 *oauth2.Config, _a1 error) *MockGoogleProvider_GetOAuth2Config_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoogleProvider_GetOAuth2Config_Call) RunAndReturn(run func(context.Context) (*oauth2.Config, error)) *MockGoogleProvider_GetOAuth2Config_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGoogleProvider creates a new instance of MockGoogleProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGoogleProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGoogleProvider {
	mock := &MockGoogleProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
