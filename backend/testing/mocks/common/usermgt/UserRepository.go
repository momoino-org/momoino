// Code generated by mockery v2.46.2. DO NOT EDIT.

package mockusermgt

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	usermgt "wano-island/common/usermgt"

	uuid "github.com/google/uuid"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// ChangePassword provides a mock function with given fields: ctx, db, userID, password
func (_m *MockUserRepository) ChangePassword(ctx context.Context, db *gorm.DB, userID string, password string) (*usermgt.UserModel, error) {
	ret := _m.Called(ctx, db, userID, password)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 *usermgt.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string, string) (*usermgt.UserModel, error)); ok {
		return rf(ctx, db, userID, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string, string) *usermgt.UserModel); ok {
		r0 = rf(ctx, db, userID, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usermgt.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, string, string) error); ok {
		r1 = rf(ctx, db, userID, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_ChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePassword'
type MockUserRepository_ChangePassword_Call struct {
	*mock.Call
}

// ChangePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - db *gorm.DB
//   - userID string
//   - password string
func (_e *MockUserRepository_Expecter) ChangePassword(ctx interface{}, db interface{}, userID interface{}, password interface{}) *MockUserRepository_ChangePassword_Call {
	return &MockUserRepository_ChangePassword_Call{Call: _e.mock.On("ChangePassword", ctx, db, userID, password)}
}

func (_c *MockUserRepository_ChangePassword_Call) Run(run func(ctx context.Context, db *gorm.DB, userID string, password string)) *MockUserRepository_ChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUserRepository_ChangePassword_Call) Return(_a0 *usermgt.UserModel, _a1 error) *MockUserRepository_ChangePassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_ChangePassword_Call) RunAndReturn(run func(context.Context, *gorm.DB, string, string) (*usermgt.UserModel, error)) *MockUserRepository_ChangePassword_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByEmail provides a mock function with given fields: ctx, db, email
func (_m *MockUserRepository) FindUserByEmail(ctx context.Context, db *gorm.DB, email string) (*usermgt.UserModel, error) {
	ret := _m.Called(ctx, db, email)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmail")
	}

	var r0 *usermgt.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) (*usermgt.UserModel, error)); ok {
		return rf(ctx, db, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) *usermgt.UserModel); ok {
		r0 = rf(ctx, db, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usermgt.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, string) error); ok {
		r1 = rf(ctx, db, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_FindUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByEmail'
type MockUserRepository_FindUserByEmail_Call struct {
	*mock.Call
}

// FindUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - db *gorm.DB
//   - email string
func (_e *MockUserRepository_Expecter) FindUserByEmail(ctx interface{}, db interface{}, email interface{}) *MockUserRepository_FindUserByEmail_Call {
	return &MockUserRepository_FindUserByEmail_Call{Call: _e.mock.On("FindUserByEmail", ctx, db, email)}
}

func (_c *MockUserRepository_FindUserByEmail_Call) Run(run func(ctx context.Context, db *gorm.DB, email string)) *MockUserRepository_FindUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(string))
	})
	return _c
}

func (_c *MockUserRepository_FindUserByEmail_Call) Return(_a0 *usermgt.UserModel, _a1 error) *MockUserRepository_FindUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_FindUserByEmail_Call) RunAndReturn(run func(context.Context, *gorm.DB, string) (*usermgt.UserModel, error)) *MockUserRepository_FindUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByID provides a mock function with given fields: ctx, db, userID
func (_m *MockUserRepository) FindUserByID(ctx context.Context, db *gorm.DB, userID uuid.UUID) (*usermgt.UserModel, error) {
	ret := _m.Called(ctx, db, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByID")
	}

	var r0 *usermgt.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uuid.UUID) (*usermgt.UserModel, error)); ok {
		return rf(ctx, db, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uuid.UUID) *usermgt.UserModel); ok {
		r0 = rf(ctx, db, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usermgt.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, uuid.UUID) error); ok {
		r1 = rf(ctx, db, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_FindUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByID'
type MockUserRepository_FindUserByID_Call struct {
	*mock.Call
}

// FindUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - db *gorm.DB
//   - userID uuid.UUID
func (_e *MockUserRepository_Expecter) FindUserByID(ctx interface{}, db interface{}, userID interface{}) *MockUserRepository_FindUserByID_Call {
	return &MockUserRepository_FindUserByID_Call{Call: _e.mock.On("FindUserByID", ctx, db, userID)}
}

func (_c *MockUserRepository_FindUserByID_Call) Run(run func(ctx context.Context, db *gorm.DB, userID uuid.UUID)) *MockUserRepository_FindUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserRepository_FindUserByID_Call) Return(_a0 *usermgt.UserModel, _a1 error) *MockUserRepository_FindUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_FindUserByID_Call) RunAndReturn(run func(context.Context, *gorm.DB, uuid.UUID) (*usermgt.UserModel, error)) *MockUserRepository_FindUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByUsername provides a mock function with given fields: ctx, db, username
func (_m *MockUserRepository) FindUserByUsername(ctx context.Context, db *gorm.DB, username string) (*usermgt.UserModel, error) {
	ret := _m.Called(ctx, db, username)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByUsername")
	}

	var r0 *usermgt.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) (*usermgt.UserModel, error)); ok {
		return rf(ctx, db, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) *usermgt.UserModel); ok {
		r0 = rf(ctx, db, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usermgt.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, string) error); ok {
		r1 = rf(ctx, db, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_FindUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByUsername'
type MockUserRepository_FindUserByUsername_Call struct {
	*mock.Call
}

// FindUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - db *gorm.DB
//   - username string
func (_e *MockUserRepository_Expecter) FindUserByUsername(ctx interface{}, db interface{}, username interface{}) *MockUserRepository_FindUserByUsername_Call {
	return &MockUserRepository_FindUserByUsername_Call{Call: _e.mock.On("FindUserByUsername", ctx, db, username)}
}

func (_c *MockUserRepository_FindUserByUsername_Call) Run(run func(ctx context.Context, db *gorm.DB, username string)) *MockUserRepository_FindUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(string))
	})
	return _c
}

func (_c *MockUserRepository_FindUserByUsername_Call) Return(_a0 *usermgt.UserModel, _a1 error) *MockUserRepository_FindUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_FindUserByUsername_Call) RunAndReturn(run func(context.Context, *gorm.DB, string) (*usermgt.UserModel, error)) *MockUserRepository_FindUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// FirstOrCreateUser provides a mock function with given fields: ctx, db, params
func (_m *MockUserRepository) FirstOrCreateUser(ctx context.Context, db *gorm.DB, params usermgt.CreateUserParams) (*usermgt.UserModel, error) {
	ret := _m.Called(ctx, db, params)

	if len(ret) == 0 {
		panic("no return value specified for FirstOrCreateUser")
	}

	var r0 *usermgt.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, usermgt.CreateUserParams) (*usermgt.UserModel, error)); ok {
		return rf(ctx, db, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, usermgt.CreateUserParams) *usermgt.UserModel); ok {
		r0 = rf(ctx, db, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usermgt.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, usermgt.CreateUserParams) error); ok {
		r1 = rf(ctx, db, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_FirstOrCreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirstOrCreateUser'
type MockUserRepository_FirstOrCreateUser_Call struct {
	*mock.Call
}

// FirstOrCreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - db *gorm.DB
//   - params usermgt.CreateUserParams
func (_e *MockUserRepository_Expecter) FirstOrCreateUser(ctx interface{}, db interface{}, params interface{}) *MockUserRepository_FirstOrCreateUser_Call {
	return &MockUserRepository_FirstOrCreateUser_Call{Call: _e.mock.On("FirstOrCreateUser", ctx, db, params)}
}

func (_c *MockUserRepository_FirstOrCreateUser_Call) Run(run func(ctx context.Context, db *gorm.DB, params usermgt.CreateUserParams)) *MockUserRepository_FirstOrCreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(usermgt.CreateUserParams))
	})
	return _c
}

func (_c *MockUserRepository_FirstOrCreateUser_Call) Return(_a0 *usermgt.UserModel, _a1 error) *MockUserRepository_FirstOrCreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_FirstOrCreateUser_Call) RunAndReturn(run func(context.Context, *gorm.DB, usermgt.CreateUserParams) (*usermgt.UserModel, error)) *MockUserRepository_FirstOrCreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
