// Code generated by mockery v2.44.1. DO NOT EDIT.

package mockusermgt

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// ComparePassword provides a mock function with given fields: ctx, password, hasedPassword
func (_m *MockUserService) ComparePassword(ctx context.Context, password []byte, hasedPassword []byte) error {
	ret := _m.Called(ctx, password, hasedPassword)

	if len(ret) == 0 {
		panic("no return value specified for ComparePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []byte) error); ok {
		r0 = rf(ctx, password, hasedPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_ComparePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComparePassword'
type MockUserService_ComparePassword_Call struct {
	*mock.Call
}

// ComparePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - password []byte
//   - hasedPassword []byte
func (_e *MockUserService_Expecter) ComparePassword(ctx interface{}, password interface{}, hasedPassword interface{}) *MockUserService_ComparePassword_Call {
	return &MockUserService_ComparePassword_Call{Call: _e.mock.On("ComparePassword", ctx, password, hasedPassword)}
}

func (_c *MockUserService_ComparePassword_Call) Run(run func(ctx context.Context, password []byte, hasedPassword []byte)) *MockUserService_ComparePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].([]byte))
	})
	return _c
}

func (_c *MockUserService_ComparePassword_Call) Return(_a0 error) *MockUserService_ComparePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_ComparePassword_Call) RunAndReturn(run func(context.Context, []byte, []byte) error) *MockUserService_ComparePassword_Call {
	_c.Call.Return(run)
	return _c
}

// HashPassword provides a mock function with given fields: ctx, password
func (_m *MockUserService) HashPassword(ctx context.Context, password string) (*[]byte, error) {
	ret := _m.Called(ctx, password)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 *[]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*[]byte, error)); ok {
		return rf(ctx, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]byte); ok {
		r0 = rf(ctx, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_HashPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashPassword'
type MockUserService_HashPassword_Call struct {
	*mock.Call
}

// HashPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - password string
func (_e *MockUserService_Expecter) HashPassword(ctx interface{}, password interface{}) *MockUserService_HashPassword_Call {
	return &MockUserService_HashPassword_Call{Call: _e.mock.On("HashPassword", ctx, password)}
}

func (_c *MockUserService_HashPassword_Call) Run(run func(ctx context.Context, password string)) *MockUserService_HashPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_HashPassword_Call) Return(_a0 *[]byte, _a1 error) *MockUserService_HashPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_HashPassword_Call) RunAndReturn(run func(context.Context, string) (*[]byte, error)) *MockUserService_HashPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
