// Code generated by mockery v2.46.2. DO NOT EDIT.

package mockusermgt

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	usermgt "wano-island/common/usermgt"
)

// MockOAuth2ProviderRepository is an autogenerated mock type for the OAuth2ProviderRepository type
type MockOAuth2ProviderRepository struct {
	mock.Mock
}

type MockOAuth2ProviderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOAuth2ProviderRepository) EXPECT() *MockOAuth2ProviderRepository_Expecter {
	return &MockOAuth2ProviderRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, params
func (_m *MockOAuth2ProviderRepository) Create(ctx context.Context, params usermgt.CreateOAuth2ProviderParams) (*usermgt.OAuth2ProviderModel, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *usermgt.OAuth2ProviderModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usermgt.CreateOAuth2ProviderParams) (*usermgt.OAuth2ProviderModel, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usermgt.CreateOAuth2ProviderParams) *usermgt.OAuth2ProviderModel); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usermgt.OAuth2ProviderModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usermgt.CreateOAuth2ProviderParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuth2ProviderRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockOAuth2ProviderRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - params usermgt.CreateOAuth2ProviderParams
func (_e *MockOAuth2ProviderRepository_Expecter) Create(ctx interface{}, params interface{}) *MockOAuth2ProviderRepository_Create_Call {
	return &MockOAuth2ProviderRepository_Create_Call{Call: _e.mock.On("Create", ctx, params)}
}

func (_c *MockOAuth2ProviderRepository_Create_Call) Run(run func(ctx context.Context, params usermgt.CreateOAuth2ProviderParams)) *MockOAuth2ProviderRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usermgt.CreateOAuth2ProviderParams))
	})
	return _c
}

func (_c *MockOAuth2ProviderRepository_Create_Call) Return(_a0 *usermgt.OAuth2ProviderModel, _a1 error) *MockOAuth2ProviderRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuth2ProviderRepository_Create_Call) RunAndReturn(run func(context.Context, usermgt.CreateOAuth2ProviderParams) (*usermgt.OAuth2ProviderModel, error)) *MockOAuth2ProviderRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, name
func (_m *MockOAuth2ProviderRepository) Get(ctx context.Context, name string) (*usermgt.OAuth2ProviderModel, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *usermgt.OAuth2ProviderModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*usermgt.OAuth2ProviderModel, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *usermgt.OAuth2ProviderModel); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usermgt.OAuth2ProviderModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuth2ProviderRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockOAuth2ProviderRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockOAuth2ProviderRepository_Expecter) Get(ctx interface{}, name interface{}) *MockOAuth2ProviderRepository_Get_Call {
	return &MockOAuth2ProviderRepository_Get_Call{Call: _e.mock.On("Get", ctx, name)}
}

func (_c *MockOAuth2ProviderRepository_Get_Call) Run(run func(ctx context.Context, name string)) *MockOAuth2ProviderRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOAuth2ProviderRepository_Get_Call) Return(_a0 *usermgt.OAuth2ProviderModel, _a1 error) *MockOAuth2ProviderRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuth2ProviderRepository_Get_Call) RunAndReturn(run func(context.Context, string) (*usermgt.OAuth2ProviderModel, error)) *MockOAuth2ProviderRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetMany provides a mock function with given fields: r
func (_m *MockOAuth2ProviderRepository) GetMany(r *http.Request) ([]usermgt.OAuth2ProviderModel, *int64, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetMany")
	}

	var r0 []usermgt.OAuth2ProviderModel
	var r1 *int64
	var r2 error
	if rf, ok := ret.Get(0).(func(*http.Request) ([]usermgt.OAuth2ProviderModel, *int64, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) []usermgt.OAuth2ProviderModel); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]usermgt.OAuth2ProviderModel)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) *int64); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*int64)
		}
	}

	if rf, ok := ret.Get(2).(func(*http.Request) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockOAuth2ProviderRepository_GetMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMany'
type MockOAuth2ProviderRepository_GetMany_Call struct {
	*mock.Call
}

// GetMany is a helper method to define mock.On call
//   - r *http.Request
func (_e *MockOAuth2ProviderRepository_Expecter) GetMany(r interface{}) *MockOAuth2ProviderRepository_GetMany_Call {
	return &MockOAuth2ProviderRepository_GetMany_Call{Call: _e.mock.On("GetMany", r)}
}

func (_c *MockOAuth2ProviderRepository_GetMany_Call) Run(run func(r *http.Request)) *MockOAuth2ProviderRepository_GetMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockOAuth2ProviderRepository_GetMany_Call) Return(_a0 []usermgt.OAuth2ProviderModel, _a1 *int64, _a2 error) *MockOAuth2ProviderRepository_GetMany_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockOAuth2ProviderRepository_GetMany_Call) RunAndReturn(run func(*http.Request) ([]usermgt.OAuth2ProviderModel, *int64, error)) *MockOAuth2ProviderRepository_GetMany_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOAuth2ProviderRepository creates a new instance of MockOAuth2ProviderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOAuth2ProviderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOAuth2ProviderRepository {
	mock := &MockOAuth2ProviderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
