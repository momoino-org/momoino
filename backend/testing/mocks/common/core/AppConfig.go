// Code generated by mockery v2.44.1. DO NOT EDIT.

package mockcore

import (
	core "wano-island/common/core"

	mock "github.com/stretchr/testify/mock"
)

// MockAppConfig is an autogenerated mock type for the AppConfig type
type MockAppConfig struct {
	mock.Mock
}

type MockAppConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAppConfig) EXPECT() *MockAppConfig_Expecter {
	return &MockAppConfig_Expecter{mock: &_m.Mock}
}

// GetAppVersion provides a mock function with given fields:
func (_m *MockAppConfig) GetAppVersion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAppVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockAppConfig_GetAppVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppVersion'
type MockAppConfig_GetAppVersion_Call struct {
	*mock.Call
}

// GetAppVersion is a helper method to define mock.On call
func (_e *MockAppConfig_Expecter) GetAppVersion() *MockAppConfig_GetAppVersion_Call {
	return &MockAppConfig_GetAppVersion_Call{Call: _e.mock.On("GetAppVersion")}
}

func (_c *MockAppConfig_GetAppVersion_Call) Run(run func()) *MockAppConfig_GetAppVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAppConfig_GetAppVersion_Call) Return(_a0 string) *MockAppConfig_GetAppVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppConfig_GetAppVersion_Call) RunAndReturn(run func() string) *MockAppConfig_GetAppVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetCompatibleVersion provides a mock function with given fields:
func (_m *MockAppConfig) GetCompatibleVersion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCompatibleVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockAppConfig_GetCompatibleVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCompatibleVersion'
type MockAppConfig_GetCompatibleVersion_Call struct {
	*mock.Call
}

// GetCompatibleVersion is a helper method to define mock.On call
func (_e *MockAppConfig_Expecter) GetCompatibleVersion() *MockAppConfig_GetCompatibleVersion_Call {
	return &MockAppConfig_GetCompatibleVersion_Call{Call: _e.mock.On("GetCompatibleVersion")}
}

func (_c *MockAppConfig_GetCompatibleVersion_Call) Run(run func()) *MockAppConfig_GetCompatibleVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAppConfig_GetCompatibleVersion_Call) Return(_a0 string) *MockAppConfig_GetCompatibleVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppConfig_GetCompatibleVersion_Call) RunAndReturn(run func() string) *MockAppConfig_GetCompatibleVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseConfig provides a mock function with given fields:
func (_m *MockAppConfig) GetDatabaseConfig() *core.DatabaseConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseConfig")
	}

	var r0 *core.DatabaseConfig
	if rf, ok := ret.Get(0).(func() *core.DatabaseConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.DatabaseConfig)
		}
	}

	return r0
}

// MockAppConfig_GetDatabaseConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseConfig'
type MockAppConfig_GetDatabaseConfig_Call struct {
	*mock.Call
}

// GetDatabaseConfig is a helper method to define mock.On call
func (_e *MockAppConfig_Expecter) GetDatabaseConfig() *MockAppConfig_GetDatabaseConfig_Call {
	return &MockAppConfig_GetDatabaseConfig_Call{Call: _e.mock.On("GetDatabaseConfig")}
}

func (_c *MockAppConfig_GetDatabaseConfig_Call) Run(run func()) *MockAppConfig_GetDatabaseConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAppConfig_GetDatabaseConfig_Call) Return(_a0 *core.DatabaseConfig) *MockAppConfig_GetDatabaseConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppConfig_GetDatabaseConfig_Call) RunAndReturn(run func() *core.DatabaseConfig) *MockAppConfig_GetDatabaseConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetJWTConfig provides a mock function with given fields:
func (_m *MockAppConfig) GetJWTConfig() *core.JWTConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetJWTConfig")
	}

	var r0 *core.JWTConfig
	if rf, ok := ret.Get(0).(func() *core.JWTConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.JWTConfig)
		}
	}

	return r0
}

// MockAppConfig_GetJWTConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJWTConfig'
type MockAppConfig_GetJWTConfig_Call struct {
	*mock.Call
}

// GetJWTConfig is a helper method to define mock.On call
func (_e *MockAppConfig_Expecter) GetJWTConfig() *MockAppConfig_GetJWTConfig_Call {
	return &MockAppConfig_GetJWTConfig_Call{Call: _e.mock.On("GetJWTConfig")}
}

func (_c *MockAppConfig_GetJWTConfig_Call) Run(run func()) *MockAppConfig_GetJWTConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAppConfig_GetJWTConfig_Call) Return(_a0 *core.JWTConfig) *MockAppConfig_GetJWTConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppConfig_GetJWTConfig_Call) RunAndReturn(run func() *core.JWTConfig) *MockAppConfig_GetJWTConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetMode provides a mock function with given fields:
func (_m *MockAppConfig) GetMode() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMode")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockAppConfig_GetMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMode'
type MockAppConfig_GetMode_Call struct {
	*mock.Call
}

// GetMode is a helper method to define mock.On call
func (_e *MockAppConfig_Expecter) GetMode() *MockAppConfig_GetMode_Call {
	return &MockAppConfig_GetMode_Call{Call: _e.mock.On("GetMode")}
}

func (_c *MockAppConfig_GetMode_Call) Run(run func()) *MockAppConfig_GetMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAppConfig_GetMode_Call) Return(_a0 string) *MockAppConfig_GetMode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppConfig_GetMode_Call) RunAndReturn(run func() string) *MockAppConfig_GetMode_Call {
	_c.Call.Return(run)
	return _c
}

// GetRevision provides a mock function with given fields:
func (_m *MockAppConfig) GetRevision() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRevision")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockAppConfig_GetRevision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRevision'
type MockAppConfig_GetRevision_Call struct {
	*mock.Call
}

// GetRevision is a helper method to define mock.On call
func (_e *MockAppConfig_Expecter) GetRevision() *MockAppConfig_GetRevision_Call {
	return &MockAppConfig_GetRevision_Call{Call: _e.mock.On("GetRevision")}
}

func (_c *MockAppConfig_GetRevision_Call) Run(run func()) *MockAppConfig_GetRevision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAppConfig_GetRevision_Call) Return(_a0 string) *MockAppConfig_GetRevision_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppConfig_GetRevision_Call) RunAndReturn(run func() string) *MockAppConfig_GetRevision_Call {
	_c.Call.Return(run)
	return _c
}

// IsDevelopment provides a mock function with given fields:
func (_m *MockAppConfig) IsDevelopment() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsDevelopment")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAppConfig_IsDevelopment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDevelopment'
type MockAppConfig_IsDevelopment_Call struct {
	*mock.Call
}

// IsDevelopment is a helper method to define mock.On call
func (_e *MockAppConfig_Expecter) IsDevelopment() *MockAppConfig_IsDevelopment_Call {
	return &MockAppConfig_IsDevelopment_Call{Call: _e.mock.On("IsDevelopment")}
}

func (_c *MockAppConfig_IsDevelopment_Call) Run(run func()) *MockAppConfig_IsDevelopment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAppConfig_IsDevelopment_Call) Return(_a0 bool) *MockAppConfig_IsDevelopment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppConfig_IsDevelopment_Call) RunAndReturn(run func() bool) *MockAppConfig_IsDevelopment_Call {
	_c.Call.Return(run)
	return _c
}

// IsProduction provides a mock function with given fields:
func (_m *MockAppConfig) IsProduction() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsProduction")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAppConfig_IsProduction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsProduction'
type MockAppConfig_IsProduction_Call struct {
	*mock.Call
}

// IsProduction is a helper method to define mock.On call
func (_e *MockAppConfig_Expecter) IsProduction() *MockAppConfig_IsProduction_Call {
	return &MockAppConfig_IsProduction_Call{Call: _e.mock.On("IsProduction")}
}

func (_c *MockAppConfig_IsProduction_Call) Run(run func()) *MockAppConfig_IsProduction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAppConfig_IsProduction_Call) Return(_a0 bool) *MockAppConfig_IsProduction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppConfig_IsProduction_Call) RunAndReturn(run func() bool) *MockAppConfig_IsProduction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAppConfig creates a new instance of MockAppConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAppConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAppConfig {
	mock := &MockAppConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
