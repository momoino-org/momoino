// Code generated by mockery v2.44.1. DO NOT EDIT.

package mockcore

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	slog "log/slog"
)

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Error provides a mock function with given fields: msg, args
func (_m *MockLogger) Error(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Error(msg interface{}, args ...interface{}) *MockLogger_Error_Call {
	return &MockLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{msg}, args...)...)}
}

func (_c *MockLogger_Error_Call) Run(run func(msg string, args ...interface{})) *MockLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Error_Call) Return() *MockLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Error_Call) RunAndReturn(run func(string, ...interface{})) *MockLogger_Error_Call {
	_c.Call.Return(run)
	return _c
}

// ErrorContext provides a mock function with given fields: ctx, msg, args
func (_m *MockLogger) ErrorContext(ctx context.Context, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_ErrorContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ErrorContext'
type MockLogger_ErrorContext_Call struct {
	*mock.Call
}

// ErrorContext is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - args ...interface{}
func (_e *MockLogger_Expecter) ErrorContext(ctx interface{}, msg interface{}, args ...interface{}) *MockLogger_ErrorContext_Call {
	return &MockLogger_ErrorContext_Call{Call: _e.mock.On("ErrorContext",
		append([]interface{}{ctx, msg}, args...)...)}
}

func (_c *MockLogger_ErrorContext_Call) Run(run func(ctx context.Context, msg string, args ...interface{})) *MockLogger_ErrorContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_ErrorContext_Call) Return() *MockLogger_ErrorContext_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_ErrorContext_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *MockLogger_ErrorContext_Call {
	_c.Call.Return(run)
	return _c
}

// Handler provides a mock function with given fields:
func (_m *MockLogger) Handler() slog.Handler {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Handler")
	}

	var r0 slog.Handler
	if rf, ok := ret.Get(0).(func() slog.Handler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(slog.Handler)
		}
	}

	return r0
}

// MockLogger_Handler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handler'
type MockLogger_Handler_Call struct {
	*mock.Call
}

// Handler is a helper method to define mock.On call
func (_e *MockLogger_Expecter) Handler() *MockLogger_Handler_Call {
	return &MockLogger_Handler_Call{Call: _e.mock.On("Handler")}
}

func (_c *MockLogger_Handler_Call) Run(run func()) *MockLogger_Handler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogger_Handler_Call) Return(_a0 slog.Handler) *MockLogger_Handler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_Handler_Call) RunAndReturn(run func() slog.Handler) *MockLogger_Handler_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: msg, args
func (_m *MockLogger) Info(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Info(msg interface{}, args ...interface{}) *MockLogger_Info_Call {
	return &MockLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{msg}, args...)...)}
}

func (_c *MockLogger_Info_Call) Run(run func(msg string, args ...interface{})) *MockLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Info_Call) Return() *MockLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Info_Call) RunAndReturn(run func(string, ...interface{})) *MockLogger_Info_Call {
	_c.Call.Return(run)
	return _c
}

// InfoContext provides a mock function with given fields: ctx, msg, args
func (_m *MockLogger) InfoContext(ctx context.Context, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_InfoContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InfoContext'
type MockLogger_InfoContext_Call struct {
	*mock.Call
}

// InfoContext is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - args ...interface{}
func (_e *MockLogger_Expecter) InfoContext(ctx interface{}, msg interface{}, args ...interface{}) *MockLogger_InfoContext_Call {
	return &MockLogger_InfoContext_Call{Call: _e.mock.On("InfoContext",
		append([]interface{}{ctx, msg}, args...)...)}
}

func (_c *MockLogger_InfoContext_Call) Run(run func(ctx context.Context, msg string, args ...interface{})) *MockLogger_InfoContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_InfoContext_Call) Return() *MockLogger_InfoContext_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_InfoContext_Call) RunAndReturn(run func(context.Context, string, ...interface{})) *MockLogger_InfoContext_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function with given fields: ctx, level, msg, args
func (_m *MockLogger) Log(ctx context.Context, level slog.Level, msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, level, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type MockLogger_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - ctx context.Context
//   - level slog.Level
//   - msg string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Log(ctx interface{}, level interface{}, msg interface{}, args ...interface{}) *MockLogger_Log_Call {
	return &MockLogger_Log_Call{Call: _e.mock.On("Log",
		append([]interface{}{ctx, level, msg}, args...)...)}
}

func (_c *MockLogger_Log_Call) Run(run func(ctx context.Context, level slog.Level, msg string, args ...interface{})) *MockLogger_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(slog.Level), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Log_Call) Return() *MockLogger_Log_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Log_Call) RunAndReturn(run func(context.Context, slog.Level, string, ...interface{})) *MockLogger_Log_Call {
	_c.Call.Return(run)
	return _c
}

// Replace provides a mock function with given fields: logger
func (_m *MockLogger) Replace(logger *slog.Logger) {
	_m.Called(logger)
}

// MockLogger_Replace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Replace'
type MockLogger_Replace_Call struct {
	*mock.Call
}

// Replace is a helper method to define mock.On call
//   - logger *slog.Logger
func (_e *MockLogger_Expecter) Replace(logger interface{}) *MockLogger_Replace_Call {
	return &MockLogger_Replace_Call{Call: _e.mock.On("Replace", logger)}
}

func (_c *MockLogger_Replace_Call) Run(run func(logger *slog.Logger)) *MockLogger_Replace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*slog.Logger))
	})
	return _c
}

func (_c *MockLogger_Replace_Call) Return() *MockLogger_Replace_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Replace_Call) RunAndReturn(run func(*slog.Logger)) *MockLogger_Replace_Call {
	_c.Call.Return(run)
	return _c
}

// Unwrap provides a mock function with given fields:
func (_m *MockLogger) Unwrap() *slog.Logger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Unwrap")
	}

	var r0 *slog.Logger
	if rf, ok := ret.Get(0).(func() *slog.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slog.Logger)
		}
	}

	return r0
}

// MockLogger_Unwrap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unwrap'
type MockLogger_Unwrap_Call struct {
	*mock.Call
}

// Unwrap is a helper method to define mock.On call
func (_e *MockLogger_Expecter) Unwrap() *MockLogger_Unwrap_Call {
	return &MockLogger_Unwrap_Call{Call: _e.mock.On("Unwrap")}
}

func (_c *MockLogger_Unwrap_Call) Run(run func()) *MockLogger_Unwrap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogger_Unwrap_Call) Return(_a0 *slog.Logger) *MockLogger_Unwrap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_Unwrap_Call) RunAndReturn(run func() *slog.Logger) *MockLogger_Unwrap_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
