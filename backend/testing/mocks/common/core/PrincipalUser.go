// Code generated by mockery v2.49.0. DO NOT EDIT.

package mockcore

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockPrincipalUser is an autogenerated mock type for the PrincipalUser type
type MockPrincipalUser struct {
	mock.Mock
}

type MockPrincipalUser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPrincipalUser) EXPECT() *MockPrincipalUser_Expecter {
	return &MockPrincipalUser_Expecter{mock: &_m.Mock}
}

// GetEmail provides a mock function with given fields:
func (_m *MockPrincipalUser) GetEmail() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEmail")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPrincipalUser_GetEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmail'
type MockPrincipalUser_GetEmail_Call struct {
	*mock.Call
}

// GetEmail is a helper method to define mock.On call
func (_e *MockPrincipalUser_Expecter) GetEmail() *MockPrincipalUser_GetEmail_Call {
	return &MockPrincipalUser_GetEmail_Call{Call: _e.mock.On("GetEmail")}
}

func (_c *MockPrincipalUser_GetEmail_Call) Run(run func()) *MockPrincipalUser_GetEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPrincipalUser_GetEmail_Call) Return(_a0 string) *MockPrincipalUser_GetEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPrincipalUser_GetEmail_Call) RunAndReturn(run func() string) *MockPrincipalUser_GetEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetFamilyName provides a mock function with given fields:
func (_m *MockPrincipalUser) GetFamilyName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFamilyName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPrincipalUser_GetFamilyName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFamilyName'
type MockPrincipalUser_GetFamilyName_Call struct {
	*mock.Call
}

// GetFamilyName is a helper method to define mock.On call
func (_e *MockPrincipalUser_Expecter) GetFamilyName() *MockPrincipalUser_GetFamilyName_Call {
	return &MockPrincipalUser_GetFamilyName_Call{Call: _e.mock.On("GetFamilyName")}
}

func (_c *MockPrincipalUser_GetFamilyName_Call) Run(run func()) *MockPrincipalUser_GetFamilyName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPrincipalUser_GetFamilyName_Call) Return(_a0 string) *MockPrincipalUser_GetFamilyName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPrincipalUser_GetFamilyName_Call) RunAndReturn(run func() string) *MockPrincipalUser_GetFamilyName_Call {
	_c.Call.Return(run)
	return _c
}

// GetGivenName provides a mock function with given fields:
func (_m *MockPrincipalUser) GetGivenName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGivenName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPrincipalUser_GetGivenName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGivenName'
type MockPrincipalUser_GetGivenName_Call struct {
	*mock.Call
}

// GetGivenName is a helper method to define mock.On call
func (_e *MockPrincipalUser_Expecter) GetGivenName() *MockPrincipalUser_GetGivenName_Call {
	return &MockPrincipalUser_GetGivenName_Call{Call: _e.mock.On("GetGivenName")}
}

func (_c *MockPrincipalUser_GetGivenName_Call) Run(run func()) *MockPrincipalUser_GetGivenName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPrincipalUser_GetGivenName_Call) Return(_a0 string) *MockPrincipalUser_GetGivenName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPrincipalUser_GetGivenName_Call) RunAndReturn(run func() string) *MockPrincipalUser_GetGivenName_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function with given fields:
func (_m *MockPrincipalUser) GetID() uuid.UUID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// MockPrincipalUser_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type MockPrincipalUser_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *MockPrincipalUser_Expecter) GetID() *MockPrincipalUser_GetID_Call {
	return &MockPrincipalUser_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *MockPrincipalUser_GetID_Call) Run(run func()) *MockPrincipalUser_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPrincipalUser_GetID_Call) Return(_a0 uuid.UUID) *MockPrincipalUser_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPrincipalUser_GetID_Call) RunAndReturn(run func() uuid.UUID) *MockPrincipalUser_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocale provides a mock function with given fields:
func (_m *MockPrincipalUser) GetLocale() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLocale")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPrincipalUser_GetLocale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocale'
type MockPrincipalUser_GetLocale_Call struct {
	*mock.Call
}

// GetLocale is a helper method to define mock.On call
func (_e *MockPrincipalUser_Expecter) GetLocale() *MockPrincipalUser_GetLocale_Call {
	return &MockPrincipalUser_GetLocale_Call{Call: _e.mock.On("GetLocale")}
}

func (_c *MockPrincipalUser_GetLocale_Call) Run(run func()) *MockPrincipalUser_GetLocale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPrincipalUser_GetLocale_Call) Return(_a0 string) *MockPrincipalUser_GetLocale_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPrincipalUser_GetLocale_Call) RunAndReturn(run func() string) *MockPrincipalUser_GetLocale_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissions provides a mock function with given fields:
func (_m *MockPrincipalUser) GetPermissions() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPermissions")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockPrincipalUser_GetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissions'
type MockPrincipalUser_GetPermissions_Call struct {
	*mock.Call
}

// GetPermissions is a helper method to define mock.On call
func (_e *MockPrincipalUser_Expecter) GetPermissions() *MockPrincipalUser_GetPermissions_Call {
	return &MockPrincipalUser_GetPermissions_Call{Call: _e.mock.On("GetPermissions")}
}

func (_c *MockPrincipalUser_GetPermissions_Call) Run(run func()) *MockPrincipalUser_GetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPrincipalUser_GetPermissions_Call) Return(_a0 []string) *MockPrincipalUser_GetPermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPrincipalUser_GetPermissions_Call) RunAndReturn(run func() []string) *MockPrincipalUser_GetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoles provides a mock function with given fields:
func (_m *MockPrincipalUser) GetRoles() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRoles")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockPrincipalUser_GetRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoles'
type MockPrincipalUser_GetRoles_Call struct {
	*mock.Call
}

// GetRoles is a helper method to define mock.On call
func (_e *MockPrincipalUser_Expecter) GetRoles() *MockPrincipalUser_GetRoles_Call {
	return &MockPrincipalUser_GetRoles_Call{Call: _e.mock.On("GetRoles")}
}

func (_c *MockPrincipalUser_GetRoles_Call) Run(run func()) *MockPrincipalUser_GetRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPrincipalUser_GetRoles_Call) Return(_a0 []string) *MockPrincipalUser_GetRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPrincipalUser_GetRoles_Call) RunAndReturn(run func() []string) *MockPrincipalUser_GetRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsername provides a mock function with given fields:
func (_m *MockPrincipalUser) GetUsername() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUsername")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPrincipalUser_GetUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsername'
type MockPrincipalUser_GetUsername_Call struct {
	*mock.Call
}

// GetUsername is a helper method to define mock.On call
func (_e *MockPrincipalUser_Expecter) GetUsername() *MockPrincipalUser_GetUsername_Call {
	return &MockPrincipalUser_GetUsername_Call{Call: _e.mock.On("GetUsername")}
}

func (_c *MockPrincipalUser_GetUsername_Call) Run(run func()) *MockPrincipalUser_GetUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPrincipalUser_GetUsername_Call) Return(_a0 string) *MockPrincipalUser_GetUsername_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPrincipalUser_GetUsername_Call) RunAndReturn(run func() string) *MockPrincipalUser_GetUsername_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPrincipalUser creates a new instance of MockPrincipalUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPrincipalUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPrincipalUser {
	mock := &MockPrincipalUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
