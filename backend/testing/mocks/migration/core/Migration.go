// Code generated by mockery v2.49.0. DO NOT EDIT.

package mockcore

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// MockMigration is an autogenerated mock type for the Migration type
type MockMigration struct {
	mock.Mock
}

type MockMigration_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMigration) EXPECT() *MockMigration_Expecter {
	return &MockMigration_Expecter{mock: &_m.Mock}
}

// AfterMigrate provides a mock function with given fields: tx
func (_m *MockMigration) AfterMigrate(tx *gorm.DB) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for AfterMigrate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigration_AfterMigrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AfterMigrate'
type MockMigration_AfterMigrate_Call struct {
	*mock.Call
}

// AfterMigrate is a helper method to define mock.On call
//   - tx *gorm.DB
func (_e *MockMigration_Expecter) AfterMigrate(tx interface{}) *MockMigration_AfterMigrate_Call {
	return &MockMigration_AfterMigrate_Call{Call: _e.mock.On("AfterMigrate", tx)}
}

func (_c *MockMigration_AfterMigrate_Call) Run(run func(tx *gorm.DB)) *MockMigration_AfterMigrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *MockMigration_AfterMigrate_Call) Return(_a0 error) *MockMigration_AfterMigrate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigration_AfterMigrate_Call) RunAndReturn(run func(*gorm.DB) error) *MockMigration_AfterMigrate_Call {
	_c.Call.Return(run)
	return _c
}

// BeforeMigrate provides a mock function with given fields: tx
func (_m *MockMigration) BeforeMigrate(tx *gorm.DB) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for BeforeMigrate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigration_BeforeMigrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeforeMigrate'
type MockMigration_BeforeMigrate_Call struct {
	*mock.Call
}

// BeforeMigrate is a helper method to define mock.On call
//   - tx *gorm.DB
func (_e *MockMigration_Expecter) BeforeMigrate(tx interface{}) *MockMigration_BeforeMigrate_Call {
	return &MockMigration_BeforeMigrate_Call{Call: _e.mock.On("BeforeMigrate", tx)}
}

func (_c *MockMigration_BeforeMigrate_Call) Run(run func(tx *gorm.DB)) *MockMigration_BeforeMigrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *MockMigration_BeforeMigrate_Call) Return(_a0 error) *MockMigration_BeforeMigrate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigration_BeforeMigrate_Call) RunAndReturn(run func(*gorm.DB) error) *MockMigration_BeforeMigrate_Call {
	_c.Call.Return(run)
	return _c
}

// Migrate provides a mock function with given fields: tx
func (_m *MockMigration) Migrate(tx *gorm.DB) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for Migrate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigration_Migrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Migrate'
type MockMigration_Migrate_Call struct {
	*mock.Call
}

// Migrate is a helper method to define mock.On call
//   - tx *gorm.DB
func (_e *MockMigration_Expecter) Migrate(tx interface{}) *MockMigration_Migrate_Call {
	return &MockMigration_Migrate_Call{Call: _e.mock.On("Migrate", tx)}
}

func (_c *MockMigration_Migrate_Call) Run(run func(tx *gorm.DB)) *MockMigration_Migrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB))
	})
	return _c
}

func (_c *MockMigration_Migrate_Call) Return(_a0 error) *MockMigration_Migrate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigration_Migrate_Call) RunAndReturn(run func(*gorm.DB) error) *MockMigration_Migrate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMigration creates a new instance of MockMigration. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMigration(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMigration {
	mock := &MockMigration{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
